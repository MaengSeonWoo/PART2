<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.talk.app.mypage.mapper.ResumeMapper">

	<resultMap id="resumeMap" type="ResumeVO">
		<id property="resumeNo" column="resume_no"/>
		<collection property="careers" javaType="ArrayList" column="resume_no" ofType="CareerVO" select="selectCareers"/>
		<collection property="licenses" javaType="ArrayList" column="resume_no" ofType="LicenseVO" select="selectLicenses"/>
		<collection property="edus" javaType="ArrayList" column="resume_no" ofType="EduVO" select="selectEdus"/>
	</resultMap>

	<select id="selectResumeList" parameterType="ResumeVO" resultType="ResumeVO">
		<![CDATA[
		SELECT  resume_no,
            resume_title,
            create_date,
            apply_no
		FROM (
		            SELECT  ROWNUM rn,
		                        r.resume_no,
		                        r.resume_title,
		                        r.create_date,
		                        a.apply_no
		                    
		                FROM resume r
                                        left join apply_resume a
                                        on r.resume_no = a.resume_no
		                WHERE ROWNUM <= #{pageNum} * #{amount} AND r.user_no = (
		                                                        SELECT user_no
		                                                        FROM USERS
		                                                        WHERE user_id = #{userId}
		                                )
		)
		
		WHERE rn > (#{pageNum} - 1) * #{amount}
		ORDER BY create_date DESC
		]]>
	</select>
	<select id="selectApplyResumeList" parameterType="ResumeVO" resultType="ResumeVO">
	<![CDATA[
		SELECT 		resume_no,
					resume_title,
				    co_name,
				    apply_date
		FROM (
				SELECT ROWNUM rn,
					r.resume_no,
					r.resume_title,
				    p.co_name,
				    ar.apply_date
				FROM apply_resume ar
				JOIN resume r 
				ON ar.resume_no = r.resume_no
				JOIN posting p 
				ON ar.posting_no = p.posting_no
				WHERE ROWNUM <= #{pageNum} * #{amount} AND r.user_no = (
		                                                select user_no
		                                                from users
		                                                where user_id = #{userId}
		                        )
		)
			WHERE rn > (#{pageNum} - 1) * #{amount}
			ORDER BY apply_date DESC
		]]>
	</select>
	
	

	<select id="selectResumeByNo" resultMap="resumeMap" parameterType="int">
		SELECT resume_no
				, resume_title
				, resume_name
				, birth
				, addr
				, tel
				, email
				, produce
				, user_no
				, resume_img
		FROM resume
		WHERE resume_no = #{resumeNo}
	</select>
	
	<update id="updateResume" parameterType="ResumeVO">
		UPDATE resume 
		SET  resume_title = #{resumeTitle}
				, resume_name = #{resumeName}
				, birth = #{birth}
				, addr = #{addr}
				, tel = #{tel}
				, email = #{email}
				<if test="resumeImg != null and resumeImg != ''">
					, resume_img = #{resumeImg}
				</if>
				, produce = #{produce}
		WHERE resume_no = #{resumeNo}
	</update>
	
	<insert id="insertResume" parameterType="ResumeVO">
		<selectKey keyProperty="resumeNo" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(resume_no), 0) + 1
			FROM resume
		</selectKey>
		INSERT INTO resume 
		(
			resume_no,
			resume_title,
			resume_name,
			birth,
			addr,
			tel,
			email,
			user_no,
			resume_img,
			<if test="produce != null and produce != ''">
			produce,
			</if>
			create_date
		)
		VALUES 
		(
			#{resumeNo},
			#{resumeTitle},
			#{resumeName},
			#{birth},
			#{addr},
			#{tel},
			#{email},
			#{userNo},
			#{resumeImg},
			<if test="produce != null and produce != ''">
			#{produce},
			</if>
			sysdate				
		)
	</insert>
	
	<select id="getUserNoById" parameterType="String" resultType="int">
        SELECT DISTINCT user_no 
        FROM users
        WHERE user_id = #{userId}
	</select>
	
	
	
	
	<select id="selectCareers" parameterType="int" resultType="CareerVO">
		SELECT career_no
				, work_place
				, role
				, resume_no
				, orders
				, career_start
				, career_end
		FROM career
		WHERE resume_no = #{resumeNo}
		order by orders
	</select>
	
	<select id="selectLicenses" parameterType="int" resultType="LicenseVO">
		SELECT license_no
				, get_date
				, license_name
				, license_company
				, resume_no
				, orders
		FROM license
		WHERE resume_no = #{resumeNo}
		ORDER BY orders
	</select>
	
	<select id="selectEdus" parameterType="int" resultType="EduVO">
		SELECT edu_no
				, graduation
				, school
				, major
				, resume_no
				, orders
		FROM edu
		WHERE resume_no = #{resumeNo}
		ORDER BY orders
	</select>
	
	
	<delete id="deleteCareerByNo" >
		delete from career 
		where resume_no = #{resumeNo}
	</delete>

	<delete id="deleteLicenseByNo">
		DELETE FROM license 
		WHERE resume_no = #{resumeNo}
	</delete>
	
	<delete id="deleteEduByNo">
		DELETE FROM edu
		WHERE resume_no = #{resumeNo}
	</delete>
	
	<insert id="insertCareer" parameterType="CareerVO">
		INSERT INTO career (career_no ,resume_no, work_place, role, career_start, career_end, orders)
        VALUES (resume_seq.nextval, #{resumeNo}, #{workPlace}, #{role}, #{careerStart}, #{careerEnd}, resume_seq.nextval)
	</insert>

	<insert id="insertLicense" parameterType="LicenseVO">
		INSERT INTO license (license_no, resume_no, get_date, license_name, license_company, orders)
        VALUES (resume_seq.nextval, #{resumeNo}, #{getDate}, #{licenseName}, #{licenseCompany}, resume_seq.nextval)
	</insert>

	<insert id="insertEdu" parameterType="EduVO">
		INSERT INTO edu (edu_no, resume_no, school, major, graduation, orders)
        VALUES (resume_seq.nextval, #{resumeNo}, #{school}, #{major}, #{graduation}, resume_seq.nextval )
	</insert>
</mapper>